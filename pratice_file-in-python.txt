


Question 1
We're working with a list of flowers and some information about each one. The create_file function writes this information to a CSV file. The contents_of_file function reads this file into records and returns the information in a nicely formatted block. Fill in the gaps of the contents_of_file function to turn the data in the CSV file into a dictionary using DictReader.








import os
import csv

# Create a file with data in it
def create_file(filename):
  with open(filename, "w") as file:
    file.write("name,color,type\n")
    file.write("carnation,pink,annual\n")
    file.write("daffodil,yellow,perennial\n")
    file.write("iris,blue,perennial\n")
    file.write("poinsettia,red,perennial\n")
    file.write("sunflower,yellow,annual\n")


# Read the file contents and format the information about each row
def contents_of_file(filename):
  return_string = ""

  # Call the function to create the file
  create_file(filename)

  # Open the file
  with open(filename,newline="") as file:
    # Read the rows of the file into a dictionary
    reader = csv.DictReader(file)
    # Process each item of the dictionary
    for row in reader:
      return_string += "a {} {} is {}\n".format(row["color"], row["name"], row["type"])
  return return_string


#Call the function
print(contents_of_file("flowers.csv"))



 Using the CSV file of flowers again, fill in the gaps of the contents_of_file function to process the data without turning it into a dictionary. How do you skip over the header record with the field names?

import os
import csv

# Create a file with data in it
def create_file(filename):
    with open(filename, "w") as file:
        file.write("name,color,type\n")
        file.write("carnation,pink,annual\n")
        file.write("daffodil,yellow,perennial\n")
        file.write("iris,blue,perennial\n")
        file.write("poinsettia,red,perennial\n")
        file.write("sunflower,yellow,annual\n")

# Read the file contents and format the information about each row
def contents_of_file(filename):
    return_string = ""

    # Call the function to create the file
    create_file(filename)

    # Open the file
    with open(filename, "r") as file:
        # Read the rows of the file
        reader = csv.DictReader(file)
       
        # Process each row
        for row in reader:
            # Extract the name, color, and type for each row
            name = row["name"]
            color = row["color"]
            type_ = row["type"]
           
            # Format the return string for data rows only
            return_string += "a {} {} is {}\n".format(color, name, type_)

    return return_string

# Call the function
print(contents_of_file("flowers.csv"))



grep cat$ /usr/share/dict/words


grep ^fruit /usr/share/dict/words

grep l.rts /usr/share/dict/words

grep -i python /usr/share/dict/words


grep thon /usr/share/dict/words




>>> import re
>>> result = re.search(r"aza","plaza")
>>> print(result)
<re.Match object; span=(2, 5), match='aza'>
>>> print(re.search(r"^x","xenon"))
<re.Match object; span=(0, 1), match='x'>
>>> print(re.search(r"p.ng","penguin"))
<re.Match object; span=(0, 4), match='peng'>
>>> print(re.search(r"p.ng","Pangaea",re.IGNORECASE))
<re.Match object; span=(0, 4), match='Pang'>
>>> 




>>> print(re.search(r"[a-z]way","the end of the highway"))
<re.Match object; span=(18, 22), match='hway'>
>>> print(re.search(r"[a-z]way","what a way to go"))
None
>>> print(re.search("cloud[a-zA-Z0-9]","cloudy"))
<re.Match object; span=(0, 6), match='cloudy'>
>>> print(re.search("cloud[a-zA-Z0-9]","cloud9"))
<re.Match object; span=(0, 6), match='cloud9'>
>>> print(re.search(r"[^a-zA-Z]","this is asentence with spaces"))
<re.Match object; span=(4, 5), match=' '>
>>> print(re.search(r"[^a-zA-Z ]","this is asentence with spaces."))
<re.Match object; span=(29, 30), match='.'>
>>> print(re.search(r"cat|dog","i like dogs."))
<re.Match object; span=(7, 10), match='dog'>
>>> print(re.search(r"cat|dog","i like both dogs and cat."))
<re.Match object; span=(12, 15), match='dog'>
>>> print(re.findall(r"cat|dog","i like both dogs and cat."))
['dog', 'cat']


>>> import re
>>> print(re.search(r"[Pp]ython","python"))
<re.Match object; span=(0, 6), match='python'>


>>> print(re.search(r"Py.*n", "Pygmalion"))
<re.Match object; span=(0, 9), match='Pygmalion'>
>>> print(re.search(r"Py.*n", "Python Programming"))
<re.Match object; span=(0, 17), match='Python Programmin'>
>>> print(re.search(r"Py.*n", "Python programming"))
<re.Match object; span=(0, 17), match='Python programmin'>
>>> print(re.search(r"Py[a-z]*n", "Python Programming"))
<re.Match object; span=(0, 6), match='Python'>
>>> print(re.search(r"Py[a-z]*n", "Pyn"))
<re.Match object; span=(0, 3), match='Pyn'>
>>> print(re.search(r"o+l+","goldfish"))
<re.Match object; span=(1, 3), match='ol'>
>>> print(re.search(r"o+l+","woolly"))
<re.Match object; span=(1, 5), match='ooll'>
>>> print(re.search(r"o+l+","boil"))
None
>>> print(re.search(r"p?each", "to each their own"))
<re.Match object; span=(3, 7), match='each'>
>>> print(re.search(r"p?each", "I like peaches"))
<re.Match object; span=(7, 12), match='peach'>
>>> 


>>> print(re.search(r".com","welcome"))
<re.Match object; span=(2, 6), match='lcom'>
>>> print(re.search(r"\.com","welcome"))
None
>>> print(re.search(r"\.com","mydomain.com"))
<re.Match object; span=(8, 12), match='.com'>
>>> print(re.search(r"\w*", "This is an example"))
<re.Match object; span=(0, 4), match='This'>
>>> print(re.search(r"\w*", "And_this_is_another"))
<re.Match object; span=(0, 19), match='And_this_is_another'>
>>> 


>>> import re
>>> print(re.search(r"A.*a","Argentina"))
<re.Match object; span=(0, 9), match='Argentina'>
>>> print(re.search(r"A.*a","Azerbaijan"))
<re.Match object; span=(0, 9), match='Azerbaija'>
>>> print(re.search(r"^A.*a$","Azerbaijan"))
None
>>> print(re.search(r"^A.*a$","Australia"))
<re.Match object; span=(0, 9), match='Australia'>




>>> import re 
>>> print(re.search(r"[a-zA-Z]{5}","a ghost"))
<re.Match object; span=(2, 7), match='ghost'>
>>> print(re.search(r"[a-zA-Z]{5}","a scary ghost appeared"))
<re.Match object; span=(2, 7), match='scary'>
>>> print(re.findall(r"[a-zA-Z]{5}","a scary ghost appeared"))
['scary', 'ghost', 'appea']
>>> print(re.findall(r"\b[a-zA-Z]{5}\b","a scary ghost appeared"))
['scary', 'ghost']
>>> print(re.findall(r"\w{5,10}","I really like strawberries"))
['really', 'strawberri']
>>> print(re.findall(r"\w{5,}","I really like strawberries"))
['really', 'strawberries']
>>> print(re.findall(r"s\w{,20}","I really like strawberries"))
['strawberries']
>>> print(re.search(r"s\w{,20}","I really like strawberries"))
<re.Match object; span=(14, 26), match='strawberries'>







>>> import re
>>> re.split(r"[.?!]", "One sentence. Another one? And the last one!")
['One sentence', ' Another one', ' And the last one', '']
>>> re.split(r"([.?!])", "One sentence. Another one? And the last one!")
['One sentence', '.', ' Another one', '?', ' And the last one', '!', '']
>>> re.sub(r"[\w.%+-]+@[\w.-]+","[REDACTED]","Received an email for go_nuts95@my.example.com")
'Received an email for [REDACTED]'
>>> re.sub(r"^([\w.-]*),([\w.-]*)$",r"\2\1","Lovelace, Ada")
'Lovelace, Ada'

echo $PATH




echo $?





>>> import subprocess
>>> subprocess.run(["date"])
Mon Jan  6 04:21:21 PM PST 2025
CompletedProcess(args=['date'], returncode=0)
>>> subprocess.run(["sleep","2"])
CompletedProcess(args=['sleep', '2'], returncode=0)
>>> result = subprocess.run["ls","this_file_not_exist"])
  File "<stdin>", line 1
    result = subprocess.run["ls","this_file_not_exist"])
                                                       ^
SyntaxError: unmatched ')'
>>> result = subprocess.run(["ls","this_file_not_exist"])
ls: cannot access 'this_file_not_exist': No such file or directory
>>> print(result.returncode)
2
>>> result = subprocess.run(["host","8.8.8.8"], capture_output=True)
>>> print(result.returncode)
0
>>> print(result.stdout)
b'8.8.8.8.in-addr.arpa domain name pointer dns.google.\n'
>>> print(result.stdout.decode().split())
['8.8.8.8.in-addr.arpa', 'domain', 'name', 'pointer', 'dns.google.']
>>> result = subprocess.run(["rm","does_not_exist"], capture_output=True)
>>> print(result.returncode)
1
>>> print(result.stdout)
b''
>>> print(result.stderr)
b"rm: cannot remove 'does_not_exist': No such file or directory\n"





















